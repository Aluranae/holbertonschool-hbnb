"""
models/base.py

D√©finit la classe de base pour toutes les entit√©s persist√©es de l'application HBnB.
Cette classe est commune √† toutes les entit√©s m√©tiers (User, Place, Review, Amenity).
Elle est con√ßue pour √™tre compatible avec SQLAlchemy et ne g√©n√®re pas de table directe.

R√¥les :
- Fournir un identifiant UUID
- G√©rer les timestamps created_at / updated_at
- Fournir des m√©thodes utilitaires : save(), update(), to_dict()
"""

# üîß Imports n√©cessaires
# uuid : pour g√©n√©rer un identifiant unique
# datetime : pour stocker des horodatages
# db : instance SQLAlchemy (import√©e depuis app/extensions)
import uuid
from datetime import datetime
from app.extensions import db


class BaseModel(db.Model):
    """
    Mod√®le de base abstrait (non instanciable) pour toutes les entit√©s.

    Toutes les classes ORM h√©ritant de BaseModel auront automatiquement :
    - un identifiant UUID en tant que cl√© primaire
    - une date de cr√©ation (created_at)
    - une date de derni√®re mise √† jour (updated_at)
    """

    # Indique √† SQLAlchemy de ne pas cr√©er de table pour ce mod√®le
    __abstract__ = True

    # colonne id
    id = db.Column(db.String(36),
                   primary_key=True,
                   default=lambda: str(uuid.uuid4()))
    # created_at
    created_at = db.Column(db.DateTime,
                           default=lambda: datetime.now(datetime.timezone.utc))
    # updated_at
    updated_at = db.Column(db.DateTime,
                           default=lambda: datetime.now(datetime.timezone.utc),
                           onupdate=lambda: datetime.now(datetime.timezone.utc))

    def save(self):
        """
        Met √† jour manuellement la date de derni√®re modification (updated_at).
        Cette m√©thode peut √™tre utilis√©e avant de d√©clencher un commit.
        """
        self.updated_at = datetime.now(datetime.timezone.utc)

    def update(self, data):
        """
        Met √† jour dynamiquement les attributs de l'objet
        √† partir d‚Äôun dictionnaire {cl√©: valeur}.

        Seules les cl√©s correspondant √† des attributs d√©j√†
        existantsseront mises √† jour.
        √Ä la fin, l‚Äôattribut updated_at est mis √† jour via self.save().
        """
        for key, value in data.items():
            if hasattr(self, key):
                setattr(self, key, value)
        self.save()

    def __eq__(self, other):
        """
        Deux objets sont consid√©r√©s comme √©gaux s‚Äôils :
        - appartiennent √† la m√™me classe,
        - ont le m√™me identifiant (self.id == other.id)
        """
        return isinstance(other, self.__class__) and self.id == other.id

    def to_dict(self):
        """
        Convertit l‚Äôobjet en dictionnaire JSON-serializable.

        - Les valeurs datetime sont converties en cha√Æne ISO 8601.
        - L‚Äôattribut __class__ est ajout√© pour l‚Äôidentification.
        - Les attributs internes (ex: SQLAlchemy) sont ignor√©s.
        """
        return {
            "id": self.id,
            "created_at": self.created_at.isoformat() if self.created_at else None,
            "updated_at": self.updated_at.isoformat() if self.updated_at else None,
            "__class__": self.__class__.__name__
        }

    def __repr__(self):
        """
        Affichage lisible en console ou log.
        """
        return f"<{self.__class__.__name__} id={self.id}>"
